renv::status()
renv::init()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
renv::init()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
renv::init("P:/Python/GitHub/insiders_clustering/app")
setwd("P:/Python/GitHub/insiders_clustering/app")
setwd("P:/Python/GitHub/insiders_clustering/app")
renv::init("P:/Python/GitHub/insiders_clustering/app")
renv::status()
renv::restore()
library(shiny)
renv::status()
library(DBI)
library(dplyr)
library(dbplyr)
library(DBI)
install.packages("DBI")
library(DBI)
renv::snapshot()
renv::status()
mydb <- dbConnect(RSQLite::SQLite(), "insiders_cluster2.sqlite")
library(DBI)
mydb <- dbConnect(RSQLite::SQLite(), "insiders_cluster2db")
mydb <- dbConnect(RSQLite::SQLite(), "insiders_cluster2.db")
install.packages("RSQLite")
mydb <- dbConnect(RSQLite::SQLite(), "insiders_cluster2.db")
dbGetQuery(mydb, "SELECT table_name
FROM information_schema.tables")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
mydb <- dbConnect(RSQLite::SQLite(), "insiders_cluster.db")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
mydb <- dbConnect(RSQLite::SQLite(), "insiders_cluster2.db")
dbDisconnect(mydb)
mydb <- dbConnect(RSQLite::SQLite(), "insiders_cluster2.db")
dbDisconnect(mydb)
mydb <- dbConnect(RSQLite::SQLite(), "P:/Python/GitHub/insiders_clustering/insiders_cluster2.db")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
df <- dbGetQuery(mydb, "SELECT * FROM insiders")
head(df)
mydb <- dbConnect(RSQLite::SQLite(), "P:/Python/GitHub/insiders_clustering/insiders_cluster.db")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
df <- dbGetQuery(mydb, "SELECT * FROM insiders")
head(df)
dbDisconnect(mydb)
install.packages("shinydashboard")
library(shinydashboard)
sessionInfo()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
head(df)
mydb <- dbConnect(RSQLite::SQLite(), "P:/Python/GitHub/insiders_clustering/insiders_cluster.db")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
df <- dbGetQuery(mydb, "SELECT * FROM insiders")
dbDisconnect(mydb)
head(df)
runApp()
source("P:/Python/GitHub/insiders_clustering/app/app2/app.R", echo=TRUE)
source("P:/Python/GitHub/insiders_clustering/app/app2/app.R", echo=TRUE)
source("P:/Python/GitHub/insiders_clustering/app/app2/app.R", echo=TRUE)
install.packages("dplyr")
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
source("P:/Python/GitHub/insiders_clustering/app/app2/app.R", echo=TRUE)
runApp('app2')
install.packages("plotly")
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
head( customer_data )
# Sample customer data
mydb <- dbConnect(RSQLite::SQLite(), "P:/Python/GitHub/insiders_clustering/insiders_cluster.db")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
customer_data <- dbGetQuery(mydb, "SELECT * FROM insiders")
dbDisconnect(mydb)
head( customer_data )
shiny::runApp()
mydb <- dbConnect(RSQLite::SQLite(), "P:/Python/GitHub/insiders_clustering/insiders_cluster.db")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
df <- dbGetQuery(mydb, "SELECT * FROM insiders")
dbDisconnect(mydb)
head(df)
distincts_clusters <- length(unique(df[["cluster"]]))
qtd_total_customers <- df %>% nrow()
qtd_loyal_customers <- df %>% filter(cluster==2) %>% nrow()
proportion_loyal <- qtd_loyal_customers/qtd_total_customers %>% trunc(digits=2)
# Set the path to the file
file_path <- paste0(getwd(),"/insiders_cluster.db")
file_info <- file.info(file_path)
last_modified <- file_info$mtime
print(last_modified)
df2 <- data.frame(df) %>% group_by(cluster) %>%
summarise(across(everything(), mean, .names = "{.col}"),customers = n()) %>%
select(c("cluster","customers","gross_revenue", "recencydays", "n_purchases_unique","qtd_items", "qtd_items_return")) %>%
ungroup()
df2
qtd_total_customers
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grDevices::colors()
runApp()
runApp()
runApp()
View(df2)
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(df2)
View(df2)
runApp()
ggplot(df2, aes(cluster, recencydays, fill= gross_revenue)) +
geom_tile()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("viridis")
runApp()
runApp()
runApp()
# The mtcars dataset:
data <- as.matrix(mtcars)
# Default Heatmap
heatmap(data)
data
mtcars
runApp()
runApp()
View(df)
View(df2)
heatmap(as.matrix(df2))
heatmap(as.matrix(df2), Rowv=cluster))
heatmap(as.matrix(df2), Rowv=cluster)
heatmap(as.matrix(df2))
heatmap(as.matrix(df2), keep.dendro=FALSE)
heatmap(as.matrix(df2), Colv=NA, Rowv=NA)
heatmap(as.matrix(df2), Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2), Colv=NA, Rowv=NA, scale='column', labRow=c("1", "2", "3", "4", "5", "6"))
heatmap(as.matrix(df2), Colv=NA, Rowv=NA, scale='column', labRow=c("1", "2", "3", "4", "999", "6"))
heatmap(as.matrix(df2 %>% drop(cluster)), Colv=NA, Rowv=NA, scale='column', labRow=c("1", "2", "3", "4", "5", "6"))
heatmap(as.matrix(df2 %>% drop("cluster")), Colv=NA, Rowv=NA, scale='column', labRow=c("1", "2", "3", "4", "5", "6"))
heatmap(as.matrix(df2 %>% select(-cluster)), Colv=NA, Rowv=NA, scale='column', labRow=c("1", "2", "3", "4", "5", "6"))
heatmap(as.matrix(df2 %>% select(cluster)), Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2 %>% select(-cluster)), Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column'))
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column')
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column'))
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column'))
pheatmap::pheatmap(mtscaled, treeheight_row = 0, treeheight_col = 0)
install.packages("pheatmap")
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0)
pheatmap::pheatmap(df2, treeheight_row = cluster, treeheight_col = 0)
pheatmap::pheatmap(df2, treeheight_row = "cluster", treeheight_col = 0)
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0)
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0)
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0, scale='column')
runApp()
View(df2)
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0, scale='column', cluster_rows = FALSE,   cluster_cols = FALSE,display_numbers = TRUE)
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0, scale='column', cluster_rows = FALSE,   cluster_cols = FALSE,display_numbers = TRUE)
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0, scale='column', cluster_rows = TRUE,   cluster_cols = TRUE,display_numbers = TRUE)
FALSE
pheatmap::pheatmap(df2, treeheight_row = 0, treeheight_col = 0, scale='column', cluster_rows = FALSE,   cluster_cols = FALSE,display_numbers = TRUE, display_numbers = round(df2,2))
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column'))
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column', col="Blue"))
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column', col="Blues"))
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column', col="Blues")) + scale_fill_distiller(palette = "Blues")
heatmap(as.matrix(df2, Colv=NA, Rowv=NA, scale='column', col="Blues")) + scale_fill_gradient(low="white", high="blue")
library(reshape)
install.packages("reshape")
library(reshape)
# Reshape the data from wide to long format
data_long <- melt(df2, id.vars = "cluster")
head(df2)
# Reshape the data from wide to long format
data_long <- melt(df2, id.vars = "cluster")
runApp()
shiny::runApp()
runApp()
runApp()
# Load Packages
library(shiny)
library(ggplot2)
library(DBI)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(shinydashboard)
library(scales)
library(viridis)
library(plotly)
# Query data in Database
mydb <- dbConnect(RSQLite::SQLite(), "P:/Python/GitHub/insiders_clustering/insiders_cluster.db")
dbGetQuery(mydb, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%';")
df <- dbGetQuery(mydb, "SELECT * FROM insiders")
dbDisconnect(mydb)
head(df)
distincts_clusters <- length(unique(df[["cluster"]]))
qtd_total_customers <- df %>% nrow()
qtd_loyal_customers <- df %>% filter(cluster==3) %>% nrow()
proportion_loyal <- qtd_loyal_customers/qtd_total_customers %>% trunc(digits=2)
# Set the path to the file
file_path <- paste0(getwd(),"/insiders_cluster.db")
file_info <- file.info(file_path)
last_modified <- file_info$mtime
print(last_modified)
df2 <- data.frame(df) %>% group_by(cluster) %>%
summarise(across(everything(), mean, .names = "{.col}"),customers = n()) %>%
select(c("cluster","customers","gross_revenue", "recencydays", "n_purchases_unique","qtd_items", "qtd_items_return")) %>%
ungroup()
df2$cluster <- df2$cluster+1
df2$recencyweeks <- df2$recencydays/7
df2
df2['gross_revenue']
df2[['gross_revenue']]
max(df2['gross_revenue'])
runApp()
runApp()
View(df2)
runApp()
df2[variablex]
variablex <- "gross_revenue"
max(df2[variablex])
colors <- ifelse(df2$variablex == max(df2[variablex]), "#1F77B4", "#AEC6CF")
variablex <- "gross_revenue"
colors <- ifelse(df2$variablex == max(df2[variablex]), "#1F77B4", "#AEC6CF")
variablex <- "gross_revenue"
colors <- ifelse(df2$variablex == max(df2 %>% select(variablex)), "#1F77B4", "#AEC6CF")
df2 %>% select(variablex)
max(df2 %>% select(variablex))
ifelse(df2$variablex == max(df2 %>% select(variablex)), "#1F77B4", "#AEC6CF")
variablex <- "gross_revenue"
colors <- ifelse(df2$variablex == max(df2 %>% select(variablex)), "#1F77B4", "#AEC6CF")
variablex <- "gross_revenue"
colors <- ifelse(df2$variablex == max(df2 %>% select(any_of(variablex))), "#1F77B4", "#AEC6CF")
df2
variablex <- "gross_revenue"
colors <- ifelse(df2$variablex == max(df2 %>% select("gross_revenue")), "#1F77B4", "#AEC6CF")
variablex <- "gross_revenue"
colors <- ifelse(df2[[variablex]] == max(df2 %>% select(variablex)), "#1F77B4", "#AEC6CF")
colors
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
variablex <- "gross_revenue"
round(df2[[variablex]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df2[["customers"]]
df2[[customers]]
runApp()
df2[customers]
df2[customers]
df2["customers"]
df2$cluster
runApp()
runApp()
runApp()
df2
variablex <- "recencydays"
df2[[variablex]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
